1.Mongoose :->
    1.Mongoose Connection:->
        const url = 'mongodb+srv://rahul:rahul@cluster0.decvt.mongodb.net/mern?retryWrites=true&w=majority'

        mongoose.connect(url, {
            useCreateIndex: true,
            useFindAndModify: true,
            useNewUrlParser: true,
            useUnifiedTopology: true,
        }).then(() => {
            console.log('Connected!!!');
        }).catch((err) => {
            console.log('No connected!!!');
        });

        app.js(file):->
            require('./db/conn');

    2.Model and Schema:->
        const mongoose = require('mongoose');
        const userSchema = new mongoose.Schema({
            name: {
                type: String,
                required: true,
            },
        });
        const user = mongoose.model('USER',userSchema);
        module.exports = user;

        app.js(file):->
            const user = require('./models/schema');

    3.Add Data:->
        1.Promises:->
            const data = new user({ name, email, work, phone, password, cpassword });
            data.save().then(() => {
                res.send('Successfuly Save!!!');
            }).catch((err) => {
                res.status(400).send('Error while saving');                        
            });
        2.Asyn and Wait:->  
            try {
                let userExist = await user.findOne({ email: email });
                if (userExist) {
                    return res.status(400).send('email already exist');
                }
                const data = new user({ name, email, work, phone, password, cpassword });
                await data.save();
                res.send(data);
            } catch (err) {
                console.log('Error');
            };
    4.Find :->
        1.FindOne:->
            let userExist = await user.findOne({ email: email });
            console.log(userExist);           


2.Middleware:->
    1.Created middleware:->
        const middleware = (req, res, next) => {
            console.log('Hello middleware');
            next();
        };
        app.get('/about', middleware, (req, res) => {
            console.log('Hello from about');
            res.send('Hello from about page!!!')
        });
    2.Bultin middleware
        app.use(express.json()); // our js file can file understand the data is coming in json
        app.use(require('./routers/auth')); // by default '/' page

3.dotenv:->
    config.env(file)-> URL='mongodb+srv://rahul:rahul@cluster0.decvt.mongodb.net/mern?retryWrites=true&w=majority'

    app.js(file)->
    dotenv.config({path:'./config.env'})
    const url = process.env.URL;

4.bcryptjs:->
    Hash (schema.js)
    userSchema.pre('save', async function (next){
        if (this.isModified('password')) {
            this.password = await bcrypt.hash(this.password, 12); 
        }
        next();
    });
    const user = mongoose.model('USER',userSchema);


    Compare (auth.js):->
    let userLogin = await user.findOne({ email: email });
        if (userLogin) {
            const hashPassword = await bcrypt.compare(password,userLogin.password);
            if(hashPassword)
                return res.send('You have login successfully!!!');
            else
                return res.status(400).send('{email,password}');                
        } else {
            return res.status(400).send('{email,password}');
        }